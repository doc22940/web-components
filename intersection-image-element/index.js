var IntersectionImageElement=function(){var t=":host,img{display:block}";class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.placeholderImage=this.shadowRoot.appendChild(document.createElement("img")),this.intersectionImage=document.createElement("img"),this.shadowRoot.appendChild(document.createElement("style")).append(t);const i=t=>{this.intersectionImage.naturalWidth&&(this.shadowRoot.removeChild(this.placeholderImage),this.shadowRoot.appendChild(this.intersectionImage)),e.intersectionObserver.unobserve(this),this.dispatchEvent(new t.constructor(t.type,t))};this.intersectionImage.addEventListener("load",i),this.intersectionImage.addEventListener("error",i)}connectedCallback(){e.intersectionObserver.observe(this)}attributeChangedCallback(t,i,s){"src"===t&&this.complete?(this.shadowRoot.removeChild(this.intersectionImage),this.shadowRoot.appendChild(this.placeholderImage),e.intersectionObserver.observe(this)):"width"!==t&&"height"!==t||("width"===t?this.placeholderImage.width=this.intersectionImage.width=s:this.placeholderImage.height=this.intersectionImage.height=s,this.placeholderImage.src='data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="'+this.width+'" height="'+this.height+'"%3E%3C/svg%3E')}get complete(){return!!this.intersectionImage.src&&this.intersectionImage.complete}get height(){return this.complete?this.intersectionImage.height:this.placeholderImage.height}set height(t){null===t?this.removeAttribute("height"):this.setAttribute("height",t)}get src(){return this.getAttribute("src")}set src(t){const e=null===t?null:t+"";null===e?this.removeAttribute("src"):e!==this.src&&this.setAttribute("src",e)}get width(){return this.complete?this.intersectionImage.width:this.placeholderImage.width}set width(t){null===t?this.removeAttribute("width"):this.setAttribute("width",t)}static intersectionObserverCallback(t){for(const e of t)e.isIntersecting&&(e.target.intersectionImage.src=e.target.getAttribute("src"))}static get observedAttributes(){return["src","width","height"]}}return e.intersectionObserverInit={},e.intersectionObserver=new IntersectionObserver(e.intersectionObserverCallback,e.intersectionObserverInit),customElements.define("intersection-image",e),e}();
